@static if VERSION < v"1.3"

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libyajl"], :libyajl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/YAJL_jll.jl/releases/download/YAJL-v2.1.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/YAJL.v2.1.0.aarch64-linux-gnu.tar.gz", "55fecba26d2809b388449d76b7e8bd3f27017892c4c9ded4081e9ad442c18a68"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/YAJL.v2.1.0.aarch64-linux-musl.tar.gz", "0091106a602ed13b0cf58babd4331a20cfa0898c037366ea9a358f8b338f6a00"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/YAJL.v2.1.0.armv7l-linux-gnueabihf.tar.gz", "89f7ce8c6926691a7c76009e3af6a24425ce46eb1bf2fbb04a3a1a2c2ebb34c3"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/YAJL.v2.1.0.armv7l-linux-musleabihf.tar.gz", "32dccfbd8a4f60e78c23d29bc5c0ca8729d3b74388f0742b3458f06e8b1c7dbd"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/YAJL.v2.1.0.i686-linux-gnu.tar.gz", "f34ede4eaac9bc541cdf11a130a26488fd24caf0ff808b04ca197649bfd6fab0"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/YAJL.v2.1.0.i686-linux-musl.tar.gz", "dc2714e22dcc12f7eaf636f9cec72d829b96dfa137991568c9a0051ba54c6901"),
    Windows(:i686) => ("$bin_prefix/YAJL.v2.1.0.i686-w64-mingw32.tar.gz", "2d4f8028cce14a129831d3b0729131d78328f72bbfc2161e0d9f4e3217e4e065"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/YAJL.v2.1.0.powerpc64le-linux-gnu.tar.gz", "747bd90cd0a54407dd530423785e66e3c612f05da66196a90fc7208f4d500b98"),
    MacOS(:x86_64) => ("$bin_prefix/YAJL.v2.1.0.x86_64-apple-darwin14.tar.gz", "b0a6f4b9db937de5b911fb62adf37bda2db668497e4e8a9519736d96edcff46a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/YAJL.v2.1.0.x86_64-linux-gnu.tar.gz", "91da605f858504319d1c8bcfda22164d1d79ac0a99a7a790cae7b69403721f95"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/YAJL.v2.1.0.x86_64-linux-musl.tar.gz", "d9bb328392181b75d8ef98c8b591e12d47d25a30ae40ed9de37778d04f2c5bd9"),
    FreeBSD(:x86_64) => ("$bin_prefix/YAJL.v2.1.0.x86_64-unknown-freebsd11.1.tar.gz", "7e0ba43ceb030783341e24882c5a326f9d90a3d0b60403cbf6c6bc4499ec70ea"),
    Windows(:x86_64) => ("$bin_prefix/YAJL.v2.1.0.x86_64-w64-mingw32.tar.gz", "b8f46f3f43a2010d6c7c8293af8173a1a6cd9be47a9790039e9ccf86ed55b93c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

end
